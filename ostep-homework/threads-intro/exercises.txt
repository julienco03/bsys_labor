1. python3 ./x86.py -p loop.s -t 1 -i 100 -R dx
    dx          Thread 0
    0
    -1   1000 sub  $1,%dx
    -1   1001 test $0,%dx
    -1   1002 jgte .top
    -1   1003 halt
_______________________________________________________________________________
2. python3 ./x86.py -p loop.s -t 2 -i 100 -a dx=3,dx=3 -R dx
   dx          Thread 0                Thread 1
    3
    2   1000 sub  $1,%dx
    2   1001 test $0,%dx
    2   1002 jgte .top
    1   1000 sub  $1,%dx
    1   1001 test $0,%dx
    1   1002 jgte .top
    0   1000 sub  $1,%dx
    0   1001 test $0,%dx
    0   1002 jgte .top
    -1   1000 sub  $1,%dx
    -1   1001 test $0,%dx
    -1   1002 jgte .top
    -1   1003 halt
    3   ----- Halt;Switch -----  ----- Halt;Switch -----
    2                            1000 sub  $1,%dx
    2                            1001 test $0,%dx
    2                            1002 jgte .top
    1                            1000 sub  $1,%dx
    1                            1001 test $0,%dx
    1                            1002 jgte .top
    0                            1000 sub  $1,%dx
    0                            1001 test $0,%dx
    0                            1002 jgte .top
    -1                            1000 sub  $1,%dx
    -1                           1001 test $0,%dx
    -1                            1002 jgte .top
    -1                            1003 halt
Does the presence of multiple threads affect your calculations Is there a
race in this code
=> Nein, da das Register dx keine shared ressource ist.
_______________________________________________________________________________
3. python3 ./x86.py -p loop.s -t 2 -i 3 -r -a dx=3,dx=3 -R dx
   dx          Thread 0                Thread 1
    3
    2   1000 sub  $1,%dx
    2   1001 test $0,%dx
    2   1002 jgte .top
    3   ------ Interrupt ------  ------ Interrupt ------
    2                            1000 sub  $1,%dx
    2                            1001 test $0,%dx
    2                            1002 jgte .top
    2   ------ Interrupt ------  ------ Interrupt ------
    1   1000 sub  $1,%dx
    1   1001 test $0,%dx
    2   ------ Interrupt ------  ------ Interrupt ------
    1                            1000 sub  $1,%dx
    1   ------ Interrupt ------  ------ Interrupt ------
    1   1002 jgte .top
    0   1000 sub  $1,%dx
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1001 test $0,%dx
    1                            1002 jgte .top
    0   ------ Interrupt ------  ------ Interrupt ------
    0   1001 test $0,%dx
    0   1002 jgte .top
    -1   1000 sub  $1,%dx
    1  ------ Interrupt ------  ------ Interrupt ------
    0                            1000 sub  $1,%dx
    -1   ------ Interrupt ------  ------ Interrupt ------
    -1  1001 test $0,%dx
    -1   1002 jgte .top
    0   ------ Interrupt ------  ------ Interrupt ------
    0                            1001 test $0,%dx
    0                            1002 jgte .top
    -1   ------ Interrupt ------  ------ Interrupt ------
    -1   1003 halt
    0   ----- Halt;Switch -----  ----- Halt;Switch -----
    -1                            1000 sub  $1,%dx
    -1                            1001 test $0,%dx
    -1   ------ Interrupt ------  ------ Interrupt ------
    -1                            1002 jgte .top
    -1                            1003 halt
Does the interrupt frequency change anything
=> Nur die Reihenfolge der Ausführung von Instruktionen. Die Werte der Register dx
werden durch die interrupt frequency nicht beeinflusst.
_______________________________________________________________________________
4. python3 ./x86.py -p looping-race-nolock.s -t 1 -M 2000
    2000           Thread 0
    0
    0   1000 mov 2000, %ax
    0   1001 add $1, %ax
    1   1002 mov %ax, 2000
    1   1003 sub  $1, %bx
    1   1004 test $0, %bx
    1   1005 jgt .top
    1   1006 halt
_______________________________________________________________________________
5. python3 ./x86.py -p looping-race-nolock.s -t 2 -a bx=3 -M 2000
 2000          Thread 0                Thread 1
    0
    0   1000 mov 2000, %ax
    0   1001 add $1, %ax
    1   1002 mov %ax, 2000
    1   1003 sub  $1, %bx
    1   1004 test $0, %bx
    1   1005 jgt .top
    1   1000 mov 2000, %ax
    1   1001 add $1, %ax
    2   1002 mov %ax, 2000
    2   1003 sub  $1, %bx
    2   1004 test $0, %bx
    2   1005 jgt .top
    2   1000 mov 2000, %ax
    2   1001 add $1, %ax
    3   1002 mov %ax, 2000
    3   1003 sub  $1, %bx
    3   1004 test $0, %bx
    3   1005 jgt .top
    3   1006 halt
    3   ----- Halt;Switch -----  ----- Halt;Switch -----
    3                            1000 mov 2000, %ax
    3                            1001 add $1, %ax
    4                            1002 mov %ax, 2000
    4                            1003 sub  $1, %bx
    4                            1004 test $0, %bx
    4                            1005 jgt .top
    4                            1000 mov 2000, %ax
    4                            1001 add $1, %ax
    5                            1002 mov %ax, 2000
    5                            1003 sub  $1, %bx
    5                            1004 test $0, %bx
    5                            1005 jgt .top
    5                            1000 mov 2000, %ax
    5                            1001 add $1, %ax
    6                            1002 mov %ax, 2000
    6                            1003 sub  $1, %bx
    6                            1004 test $0, %bx
    6                            1005 jgt .top
    6                            1006 halt
=> Why does each thread loop three times
Weil die Bedingung { test $0, %bx; jgt .top } 3x falsch ist und somit 3x zur
Adresse 1000 gesprungen und value inkrementiert wird.
=> What is final value of value
Sechs, da beide Threads drei mal loopen und dabei value um eins erhöhen.
_______________________________________________________________________________
6. python3 ./x86.py -p looping-race-nolock.s -t 2 -M 2000 -i 4 -r -s 0
 2000          Thread 0                Thread 1
    0
    0   1000 mov 2000, %ax
    0   1001 add $1, %ax
    1   1002 mov %ax, 2000
    1   1003 sub  $1, %bx
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1000 mov 2000, %ax
    1                            1001 add $1, %ax
    2                            1002 mov %ax, 2000
    2                            1003 sub  $1, %bx
    2   ------ Interrupt ------  ------ Interrupt ------
    2   1004 test $0, %bx
    2   1005 jgt .top
    2   ------ Interrupt ------  ------ Interrupt ------
    2                            1004 test $0, %bx
    2                            1005 jgt .top
    2   ------ Interrupt ------  ------ Interrupt ------
    2   1006 halt
    2   ----- Halt;Switch -----  ----- Halt;Switch -----
    2                            1006 halt
Does the timing of the interrupt matter?
=> Ja, wird der Thread nämlich nach dem Inkrementieren von value unterbrochen,
wird der Wert von ax nicht in die shared ressorce geschrieben.
Somit unterscheidet sich das Endergebnis je nach timing der Interrupts.
Where can it safely occur
=> Nach Instruktion 1002.
Where not?
=> Zwischen den Instruktionen 1000 und 1002.
In other words, where is the critical section exactly
=> Der kritische Bereich umfasst die Instruktionen 1000 bis 1002.
_______________________________________________________________________________
7. python3 ./x86.py -p looping-race-nolock.s -a bx=1 -t 2 -M 2000 -i 1
 2000          Thread 0                Thread 1
    0
    0   1000 mov 2000, %ax
    0   ------ Interrupt ------  ------ Interrupt ------
    0                            1000 mov 2000, %ax
    0   ------ Interrupt ------  ------ Interrupt ------
    0   1001 add $1, %ax
    0   ------ Interrupt ------  ------ Interrupt ------
    0                            1001 add $1, %ax
    0   ------ Interrupt ------  ------ Interrupt ------
    1   1002 mov %ax, 2000
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1002 mov %ax, 2000
    1   ------ Interrupt ------  ------ Interrupt ------
    1   1003 sub  $1, %bx
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1003 sub  $1, %bx
    1   ------ Interrupt ------  ------ Interrupt ------
    1   1004 test $0, %bx
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1004 test $0, %bx
    1   ------ Interrupt ------  ------ Interrupt ------
    1   1005 jgt .top
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1005 jgt .top
    1   ------ Interrupt ------  ------ Interrupt ------
    1   1006 halt
    1   ----- Halt;Switch -----  ----- Halt;Switch -----
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1006 halt
python3 ./x86.py -p looping-race-nolock.s -a bx=1 -t 2 -M 2000 -i 2
 2000          Thread 0                Thread 1
    0
    0   1000 mov 2000, %ax
    0   1001 add $1, %ax
    0   ------ Interrupt ------  ------ Interrupt ------
    0                            1000 mov 2000, %ax
    0                            1001 add $1, %ax
    0   ------ Interrupt ------  ------ Interrupt ------
    1   1002 mov %ax, 2000
    1   1003 sub  $1, %bx
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1002 mov %ax, 2000
    1                            1003 sub  $1, %bx
    1   ------ Interrupt ------  ------ Interrupt ------
    1   1004 test $0, %bx
    1   1005 jgt .top
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1004 test $0, %bx
    1                            1005 jgt .top
    1   ------ Interrupt ------  ------ Interrupt ------
    1   1006 halt
    1   ----- Halt;Switch -----  ----- Halt;Switch -----
    1                            1006 halt
python3 ./x86.py -p looping-race-nolock.s -a bx=1 -t 2 -M 2000 -i 3
 2000          Thread 0                Thread 1
    0
    0   1000 mov 2000, %ax
    0   1001 add $1, %ax
    1   1002 mov %ax, 2000
    1   ------ Interrupt ------  ------ Interrupt ------
    1                            1000 mov 2000, %ax
    1                            1001 add $1, %ax
    2                            1002 mov %ax, 2000
    2   ------ Interrupt ------  ------ Interrupt ------
    2   1003 sub  $1, %bx
    2   1004 test $0, %bx
    2   1005 jgt .top
    2   ------ Interrupt ------  ------ Interrupt ------
    2                            1003 sub  $1, %bx
    2                            1004 test $0, %bx
    2                            1005 jgt .top
    2   ------ Interrupt ------  ------ Interrupt ------
    2   1006 halt
    2   ----- Halt;Switch -----  ----- Halt;Switch -----
    2                            1006 halt
For which interrupt intervals does the program give the “correct” answer
=> Wenn gilt: interrupt frequency >= Anzahl Instruktionen der critical section,
arbeitet der Prozess deterministisch.
_______________________________________________________________________________
8. python3 ./x86.py -p looping-race-nolock.s -a bx=100 -t 2 -M 2000 -i ...
=>  erwartetes Ergebnis: value = Anzahl Threads * Anzahl Schleifendurchgänge (bx)
    i=1 --> value=100
    i=3 --> value=200 (da critical section = 3 Instruktionen)
_______________________________________________________________________________
9. python3 ./x86.py -p wait-for-me.s -a ax=1,ax=0 -R ax -M 2000
 2000      ax          Thread 0                Thread 1
    0      1
    0      1    1000 test $1, %ax
    0      1    1001 je .signaller
    1      1    1006 mov  $1, 2000
    1      1    1007 halt
    1      0    ----- Halt;Switch -----  ----- Halt;Switch -----
    1      0                             1000 test $1, %ax
    1      0                             1001 je .signaller
    1      0                             1002 mov  2000, %cx
    1      0                             1003 test $1, %cx
    1      0                             1004 jne .waiter
    1      0                             1005 halt
_______________________________________________________________________________
10. python3 ./x86.py -p wait-for-me.s -a ax=0,ax=1 -R ax -M 2000
 2000      ax          Thread 0                Thread 1
    0       0
    0       0   1000 test $1, %ax
    0       0   1001 je .signaller
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       1   ------ Interrupt ------  ------ Interrupt ------
    0       1                           1000 test $1, %ax
    0       1                            1001 je .signaller
    1       1                            1006 mov  $1, 2000
    1       1                            1007 halt
    1       0   ----- Halt;Switch -----  ----- Halt;Switch -----
    1       0   1002 mov  2000, %cx
    1       0   1003 test $1, %cx
    1       0   1004 jne .waiter
    1       0   1005 halt
What is thread 0 doing?
=> Thread0 loopt solange bis ein Interrupt auftritt. Erst dann wird zu Thread1 geswitcht,
wodurch der value inkrementiert und an die Adresse 2000 geschrieben wird.
How would changing the interrupt interval (e.g., -i 1000, or perhaps to use random intervals)
change the trace outcome?
=> Sehr negativ, da für '-1 1000' etwa 1000/3 (Instruktionen) geloopt werden würde.
Is the program efficiently using the CPU?
=> Nein, da die CPU aktiv wartet und somit andere (wichtigere) Prozesse blockiert.
